// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DB.proto

#ifndef PROTOBUF_INCLUDED_DB_2eproto
#define PROTOBUF_INCLUDED_DB_2eproto

#include <google/protobuf/stubs/common.h>

#include <string>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DB_2eproto

namespace protobuf_DB_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable
      serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DB_2eproto
class InsertResult;
class InsertResultDefaultTypeInternal;
extern InsertResultDefaultTypeInternal _InsertResult_default_instance_;
class InsertResults;
class InsertResultsDefaultTypeInternal;
extern InsertResultsDefaultTypeInternal _InsertResults_default_instance_;
class InsertSample;
class InsertSampleDefaultTypeInternal;
extern InsertSampleDefaultTypeInternal _InsertSample_default_instance_;
class InsertSamples;
class InsertSamplesDefaultTypeInternal;
extern InsertSamplesDefaultTypeInternal _InsertSamples_default_instance_;
class QueryGroupSample;
class QueryGroupSampleDefaultTypeInternal;
extern QueryGroupSampleDefaultTypeInternal _QueryGroupSample_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResult;
class QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class QueryResults;
class QueryResultsDefaultTypeInternal;
extern QueryResultsDefaultTypeInternal _QueryResults_default_instance_;
class QuerySample;
class QuerySampleDefaultTypeInternal;
extern QuerySampleDefaultTypeInternal _QuerySample_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class Tags;
class TagsDefaultTypeInternal;
extern TagsDefaultTypeInternal _Tags_default_instance_;
namespace google {
namespace protobuf {
template <>
::InsertResult* Arena::CreateMaybeMessage<::InsertResult>(Arena*);
template <>
::InsertResults* Arena::CreateMaybeMessage<::InsertResults>(Arena*);
template <>
::InsertSample* Arena::CreateMaybeMessage<::InsertSample>(Arena*);
template <>
::InsertSamples* Arena::CreateMaybeMessage<::InsertSamples>(Arena*);
template <>
::QueryGroupSample* Arena::CreateMaybeMessage<::QueryGroupSample>(Arena*);
template <>
::QueryRequest* Arena::CreateMaybeMessage<::QueryRequest>(Arena*);
template <>
::QueryResult* Arena::CreateMaybeMessage<::QueryResult>(Arena*);
template <>
::QueryResults* Arena::CreateMaybeMessage<::QueryResults>(Arena*);
template <>
::QuerySample* Arena::CreateMaybeMessage<::QuerySample>(Arena*);
template <>
::Tag* Arena::CreateMaybeMessage<::Tag>(Arena*);
template <>
::Tags* Arena::CreateMaybeMessage<::Tags>(Arena*);
}  // namespace protobuf
}  // namespace google

enum InsertSample_InsertType {
  InsertSample_InsertType_TS = 0,
  InsertSample_InsertType_GROUP = 1,
  InsertSample_InsertType_InsertSample_InsertType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::google::protobuf::kint32min,
  InsertSample_InsertType_InsertSample_InsertType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::google::protobuf::kint32max
};
bool InsertSample_InsertType_IsValid(int value);
const InsertSample_InsertType InsertSample_InsertType_InsertType_MIN =
    InsertSample_InsertType_TS;
const InsertSample_InsertType InsertSample_InsertType_InsertType_MAX =
    InsertSample_InsertType_GROUP;
const int InsertSample_InsertType_InsertType_ARRAYSIZE =
    InsertSample_InsertType_InsertType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InsertSample_InsertType_descriptor();
inline const ::std::string& InsertSample_InsertType_Name(
    InsertSample_InsertType value) {
  return ::google::protobuf::internal::NameOfEnum(
      InsertSample_InsertType_descriptor(), value);
}
inline bool InsertSample_InsertType_Parse(const ::std::string& name,
                                          InsertSample_InsertType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InsertSample_InsertType>(
      InsertSample_InsertType_descriptor(), name, value);
}
// ===================================================================

class Tag : public ::google::protobuf::
                Message /* @@protoc_insertion_point(class_definition:Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  Tag(Tag&& from) noexcept : Tag() { *this = ::std::move(from); }

  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(&_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  void Swap(Tag* other);
  friend void swap(Tag& a, Tag& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline Tag* New() const final { return CreateMaybeMessage<Tag>(NULL); }

  Tag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
#if LANG_CXX11
  void set_name(::std::string&& value);
#endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
#if LANG_CXX11
  void set_value(::std::string&& value);
#endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Tag)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tags : public ::google::protobuf::
                 Message /* @@protoc_insertion_point(class_definition:Tags) */ {
 public:
  Tags();
  virtual ~Tags();

  Tags(const Tags& from);

  inline Tags& operator=(const Tags& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  Tags(Tags&& from) noexcept : Tags() { *this = ::std::move(from); }

  inline Tags& operator=(Tags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tags* internal_default_instance() {
    return reinterpret_cast<const Tags*>(&_Tags_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  void Swap(Tags* other);
  friend void swap(Tags& a, Tags& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline Tags* New() const final { return CreateMaybeMessage<Tags>(NULL); }

  Tags* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tags>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tags& from);
  void MergeFrom(const Tags& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tags* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Tag tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  ::Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField<::Tag>* mutable_tags();
  const ::Tag& tags(int index) const;
  ::Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField<::Tag>& tags() const;

  // @@protoc_insertion_point(class_scope:Tags)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::Tag> tags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertSample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InsertSample)
                                                         */
{
 public:
  InsertSample();
  virtual ~InsertSample();

  InsertSample(const InsertSample& from);

  inline InsertSample& operator=(const InsertSample& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  InsertSample(InsertSample&& from) noexcept : InsertSample() {
    *this = ::std::move(from);
  }

  inline InsertSample& operator=(InsertSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertSample* internal_default_instance() {
    return reinterpret_cast<const InsertSample*>(
        &_InsertSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  void Swap(InsertSample* other);
  friend void swap(InsertSample& a, InsertSample& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline InsertSample* New() const final {
    return CreateMaybeMessage<InsertSample>(NULL);
  }

  InsertSample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertSample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertSample& from);
  void MergeFrom(const InsertSample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertSample* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InsertSample_InsertType InsertType;
  static const InsertType TS = InsertSample_InsertType_TS;
  static const InsertType GROUP = InsertSample_InsertType_GROUP;
  static inline bool InsertType_IsValid(int value) {
    return InsertSample_InsertType_IsValid(value);
  }
  static const InsertType InsertType_MIN =
      InsertSample_InsertType_InsertType_MIN;
  static const InsertType InsertType_MAX =
      InsertSample_InsertType_InsertType_MAX;
  static const int InsertType_ARRAYSIZE =
      InsertSample_InsertType_InsertType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InsertType_descriptor() {
    return InsertSample_InsertType_descriptor();
  }
  static inline const ::std::string& InsertType_Name(InsertType value) {
    return InsertSample_InsertType_Name(value);
  }
  static inline bool InsertType_Parse(const ::std::string& name,
                                      InsertType* value) {
    return InsertSample_InsertType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 slots = 3;
  int slots_size() const;
  void clear_slots();
  static const int kSlotsFieldNumber = 3;
  ::google::protobuf::uint32 slots(int index) const;
  void set_slots(int index, ::google::protobuf::uint32 value);
  void add_slots(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField<::google::protobuf::uint32>& slots()
      const;
  ::google::protobuf::RepeatedField<::google::protobuf::uint32>*
  mutable_slots();

  // repeated .Tags lsets = 5;
  int lsets_size() const;
  void clear_lsets();
  static const int kLsetsFieldNumber = 5;
  ::Tags* mutable_lsets(int index);
  ::google::protobuf::RepeatedPtrField<::Tags>* mutable_lsets();
  const ::Tags& lsets(int index) const;
  ::Tags* add_lsets();
  const ::google::protobuf::RepeatedPtrField<::Tags>& lsets() const;

  // repeated double v = 7;
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 7;
  double v(int index) const;
  void set_v(int index, double value);
  void add_v(double value);
  const ::google::protobuf::RepeatedField<double>& v() const;
  ::google::protobuf::RepeatedField<double>* mutable_v();

  // .Tags lset = 4;
  bool has_lset() const;
  void clear_lset();
  static const int kLsetFieldNumber = 4;

 private:
  const ::Tags& _internal_lset() const;

 public:
  const ::Tags& lset() const;
  ::Tags* release_lset();
  ::Tags* mutable_lset();
  void set_allocated_lset(::Tags* lset);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int64 t = 6;
  void clear_t();
  static const int kTFieldNumber = 6;
  ::google::protobuf::int64 t() const;
  void set_t(::google::protobuf::int64 value);

  // .InsertSample.InsertType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::InsertSample_InsertType type() const;
  void set_type(::InsertSample_InsertType value);

  // @@protoc_insertion_point(class_scope:InsertSample)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<::google::protobuf::uint32> slots_;
  mutable int _slots_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::Tags> lsets_;
  ::google::protobuf::RepeatedField<double> v_;
  mutable int _v_cached_byte_size_;
  ::Tags* lset_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int64 t_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertSamples : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InsertSamples)
                                                          */
{
 public:
  InsertSamples();
  virtual ~InsertSamples();

  InsertSamples(const InsertSamples& from);

  inline InsertSamples& operator=(const InsertSamples& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  InsertSamples(InsertSamples&& from) noexcept : InsertSamples() {
    *this = ::std::move(from);
  }

  inline InsertSamples& operator=(InsertSamples&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertSamples& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertSamples* internal_default_instance() {
    return reinterpret_cast<const InsertSamples*>(
        &_InsertSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  void Swap(InsertSamples* other);
  friend void swap(InsertSamples& a, InsertSamples& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline InsertSamples* New() const final {
    return CreateMaybeMessage<InsertSamples>(NULL);
  }

  InsertSamples* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertSamples>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertSamples& from);
  void MergeFrom(const InsertSamples& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertSamples* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .InsertSample samples = 1;
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 1;
  ::InsertSample* mutable_samples(int index);
  ::google::protobuf::RepeatedPtrField<::InsertSample>* mutable_samples();
  const ::InsertSample& samples(int index) const;
  ::InsertSample* add_samples();
  const ::google::protobuf::RepeatedPtrField<::InsertSample>& samples() const;

  // @@protoc_insertion_point(class_scope:InsertSamples)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::InsertSample> samples_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InsertResult)
                                                         */
{
 public:
  InsertResult();
  virtual ~InsertResult();

  InsertResult(const InsertResult& from);

  inline InsertResult& operator=(const InsertResult& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  InsertResult(InsertResult&& from) noexcept : InsertResult() {
    *this = ::std::move(from);
  }

  inline InsertResult& operator=(InsertResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertResult* internal_default_instance() {
    return reinterpret_cast<const InsertResult*>(
        &_InsertResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;

  void Swap(InsertResult* other);
  friend void swap(InsertResult& a, InsertResult& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline InsertResult* New() const final {
    return CreateMaybeMessage<InsertResult>(NULL);
  }

  InsertResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertResult& from);
  void MergeFrom(const InsertResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertResult* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 slots = 2;
  int slots_size() const;
  void clear_slots();
  static const int kSlotsFieldNumber = 2;
  ::google::protobuf::uint32 slots(int index) const;
  void set_slots(int index, ::google::protobuf::uint32 value);
  void add_slots(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField<::google::protobuf::uint32>& slots()
      const;
  ::google::protobuf::RepeatedField<::google::protobuf::uint32>*
  mutable_slots();

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:InsertResult)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<::google::protobuf::uint32> slots_;
  mutable int _slots_cached_byte_size_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InsertResults)
                                                          */
{
 public:
  InsertResults();
  virtual ~InsertResults();

  InsertResults(const InsertResults& from);

  inline InsertResults& operator=(const InsertResults& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  InsertResults(InsertResults&& from) noexcept : InsertResults() {
    *this = ::std::move(from);
  }

  inline InsertResults& operator=(InsertResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertResults* internal_default_instance() {
    return reinterpret_cast<const InsertResults*>(
        &_InsertResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;

  void Swap(InsertResults* other);
  friend void swap(InsertResults& a, InsertResults& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline InsertResults* New() const final {
    return CreateMaybeMessage<InsertResults>(NULL);
  }

  InsertResults* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertResults>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertResults& from);
  void MergeFrom(const InsertResults& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertResults* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .InsertResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::InsertResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField<::InsertResult>* mutable_results();
  const ::InsertResult& results(int index) const;
  ::InsertResult* add_results();
  const ::google::protobuf::RepeatedPtrField<::InsertResult>& results() const;

  // @@protoc_insertion_point(class_scope:InsertResults)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::InsertResult> results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryRequest)
                                                         */
{
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  QueryRequest(QueryRequest&& from) noexcept : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
        &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;

  void Swap(QueryRequest* other);
  friend void swap(QueryRequest& a, QueryRequest& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(NULL);
  }

  QueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Tags lset = 2;
  bool has_lset() const;
  void clear_lset();
  static const int kLsetFieldNumber = 2;

 private:
  const ::Tags& _internal_lset() const;

 public:
  const ::Tags& lset() const;
  ::Tags* release_lset();
  ::Tags* mutable_lset();
  void set_allocated_lset(::Tags* lset);

  // int64 mint = 3;
  void clear_mint();
  static const int kMintFieldNumber = 3;
  ::google::protobuf::int64 mint() const;
  void set_mint(::google::protobuf::int64 value);

  // int64 maxt = 4;
  void clear_maxt();
  static const int kMaxtFieldNumber = 4;
  ::google::protobuf::int64 maxt() const;
  void set_maxt(::google::protobuf::int64 value);

  // bool return_metric = 1;
  void clear_return_metric();
  static const int kReturnMetricFieldNumber = 1;
  bool return_metric() const;
  void set_return_metric(bool value);

  // @@protoc_insertion_point(class_scope:QueryRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tags* lset_;
  ::google::protobuf::int64 mint_;
  ::google::protobuf::int64 maxt_;
  bool return_metric_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuerySample
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:QuerySample) */ {
 public:
  QuerySample();
  virtual ~QuerySample();

  QuerySample(const QuerySample& from);

  inline QuerySample& operator=(const QuerySample& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  QuerySample(QuerySample&& from) noexcept : QuerySample() {
    *this = ::std::move(from);
  }

  inline QuerySample& operator=(QuerySample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuerySample* internal_default_instance() {
    return reinterpret_cast<const QuerySample*>(
        &_QuerySample_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;

  void Swap(QuerySample* other);
  friend void swap(QuerySample& a, QuerySample& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline QuerySample* New() const final {
    return CreateMaybeMessage<QuerySample>(NULL);
  }

  QuerySample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuerySample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuerySample& from);
  void MergeFrom(const QuerySample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySample* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  ::google::protobuf::int64 t() const;
  void set_t(::google::protobuf::int64 value);

  // double v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  double v() const;
  void set_v(double value);

  // @@protoc_insertion_point(class_scope:QuerySample)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 t_;
  double v_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryGroupSample : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryGroupSample)
                                                             */
{
 public:
  QueryGroupSample();
  virtual ~QueryGroupSample();

  QueryGroupSample(const QueryGroupSample& from);

  inline QueryGroupSample& operator=(const QueryGroupSample& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  QueryGroupSample(QueryGroupSample&& from) noexcept : QueryGroupSample() {
    *this = ::std::move(from);
  }

  inline QueryGroupSample& operator=(QueryGroupSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryGroupSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGroupSample* internal_default_instance() {
    return reinterpret_cast<const QueryGroupSample*>(
        &_QueryGroupSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;

  void Swap(QueryGroupSample* other);
  friend void swap(QueryGroupSample& a, QueryGroupSample& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline QueryGroupSample* New() const final {
    return CreateMaybeMessage<QueryGroupSample>(NULL);
  }

  QueryGroupSample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryGroupSample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryGroupSample& from);
  void MergeFrom(const QueryGroupSample& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupSample* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QuerySample values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  ::QuerySample* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::QuerySample>* mutable_values();
  const ::QuerySample& values(int index) const;
  ::QuerySample* add_values();
  const ::google::protobuf::RepeatedPtrField<::QuerySample>& values() const;

  // .Tags metric = 1;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 1;

 private:
  const ::Tags& _internal_metric() const;

 public:
  const ::Tags& metric() const;
  ::Tags* release_metric();
  ::Tags* mutable_metric();
  void set_allocated_metric(::Tags* metric);

  // @@protoc_insertion_point(class_scope:QueryGroupSample)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::QuerySample> values_;
  ::Tags* metric_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResult
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:QueryResult) */ {
 public:
  QueryResult();
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  QueryResult(QueryResult&& from) noexcept : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
        &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;

  void Swap(QueryResult* other);
  friend void swap(QueryResult& a, QueryResult& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline QueryResult* New() const final {
    return CreateMaybeMessage<QueryResult>(NULL);
  }

  QueryResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QuerySample values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::QuerySample* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::QuerySample>* mutable_values();
  const ::QuerySample& values(int index) const;
  ::QuerySample* add_values();
  const ::google::protobuf::RepeatedPtrField<::QuerySample>& values() const;

  // repeated .QueryGroupSample series = 4;
  int series_size() const;
  void clear_series();
  static const int kSeriesFieldNumber = 4;
  ::QueryGroupSample* mutable_series(int index);
  ::google::protobuf::RepeatedPtrField<::QueryGroupSample>* mutable_series();
  const ::QueryGroupSample& series(int index) const;
  ::QueryGroupSample* add_series();
  const ::google::protobuf::RepeatedPtrField<::QueryGroupSample>& series()
      const;

  // .Tags metric = 1;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 1;

 private:
  const ::Tags& _internal_metric() const;

 public:
  const ::Tags& metric() const;
  ::Tags* release_metric();
  ::Tags* mutable_metric();
  void set_allocated_metric(::Tags* metric);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:QueryResult)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::QuerySample> values_;
  ::google::protobuf::RepeatedPtrField<::QueryGroupSample> series_;
  ::Tags* metric_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QueryResults)
                                                         */
{
 public:
  QueryResults();
  virtual ~QueryResults();

  QueryResults(const QueryResults& from);

  inline QueryResults& operator=(const QueryResults& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  QueryResults(QueryResults&& from) noexcept : QueryResults() {
    *this = ::std::move(from);
  }

  inline QueryResults& operator=(QueryResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResults* internal_default_instance() {
    return reinterpret_cast<const QueryResults*>(
        &_QueryResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;

  void Swap(QueryResults* other);
  friend void swap(QueryResults& a, QueryResults& b) { a.Swap(&b); }

  // implements Message ----------------------------------------------

  inline QueryResults* New() const final {
    return CreateMaybeMessage<QueryResults>(NULL);
  }

  QueryResults* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResults>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResults& from);
  void MergeFrom(const QueryResults& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResults* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QueryResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::QueryResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField<::QueryResult>* mutable_results();
  const ::QueryResult& results(int index) const;
  ::QueryResult* add_results();
  const ::google::protobuf::RepeatedPtrField<::QueryResult>& results() const;

  // @@protoc_insertion_point(class_scope:QueryResults)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::QueryResult> results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DB_2eproto::TableStruct;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tag

// bytes name = 1;
inline void Tag::clear_name() {
  name_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::name() const {
  // @@protoc_insertion_point(field_get:Tag.name)
  return name_.GetNoArena();
}
inline void Tag::set_name(const ::std::string& value) {
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   value);
  // @@protoc_insertion_point(field_set:Tag.name)
}
#if LANG_CXX11
inline void Tag::set_name(::std::string&& value) {
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tag.name)
}
#endif
inline void Tag::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.name)
}
inline void Tag::set_name(const void* value, size_t size) {
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.name)
}
inline ::std::string* Tag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tag.name)
  return name_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_name() {
  // @@protoc_insertion_point(field_release:Tag.name)

  return name_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_name(::std::string* name) {
  if (name != NULL) {
  } else {
  }
  name_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tag.name)
}

// bytes value = 2;
inline void Tag::clear_value() {
  value_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::value() const {
  // @@protoc_insertion_point(field_get:Tag.value)
  return value_.GetNoArena();
}
inline void Tag::set_value(const ::std::string& value) {
  value_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tag.value)
}
#if LANG_CXX11
inline void Tag::set_value(::std::string&& value) {
  value_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tag.value)
}
#endif
inline void Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  value_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tag.value)
}
inline void Tag::set_value(const void* value, size_t size) {
  value_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tag.value)
}
inline ::std::string* Tag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Tag.value)
  return value_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_value() {
  // @@protoc_insertion_point(field_release:Tag.value)

  return value_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
  } else {
  }
  value_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Tag.value)
}

// -------------------------------------------------------------------

// Tags

// repeated .Tag tags = 1;
inline int Tags::tags_size() const { return tags_.size(); }
inline void Tags::clear_tags() { tags_.Clear(); }
inline ::Tag* Tags::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Tags.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Tag>* Tags::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Tags.tags)
  return &tags_;
}
inline const ::Tag& Tags::tags(int index) const {
  // @@protoc_insertion_point(field_get:Tags.tags)
  return tags_.Get(index);
}
inline ::Tag* Tags::add_tags() {
  // @@protoc_insertion_point(field_add:Tags.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::Tag>& Tags::tags() const {
  // @@protoc_insertion_point(field_list:Tags.tags)
  return tags_;
}

// -------------------------------------------------------------------

// InsertSample

// .InsertSample.InsertType type = 1;
inline void InsertSample::clear_type() { type_ = 0; }
inline ::InsertSample_InsertType InsertSample::type() const {
  // @@protoc_insertion_point(field_get:InsertSample.type)
  return static_cast<::InsertSample_InsertType>(type_);
}
inline void InsertSample::set_type(::InsertSample_InsertType value) {
  type_ = value;
  // @@protoc_insertion_point(field_set:InsertSample.type)
}

// uint64 id = 2;
inline void InsertSample::clear_id() { id_ = GOOGLE_ULONGLONG(0); }
inline ::google::protobuf::uint64 InsertSample::id() const {
  // @@protoc_insertion_point(field_get:InsertSample.id)
  return id_;
}
inline void InsertSample::set_id(::google::protobuf::uint64 value) {
  id_ = value;
  // @@protoc_insertion_point(field_set:InsertSample.id)
}

// repeated uint32 slots = 3;
inline int InsertSample::slots_size() const { return slots_.size(); }
inline void InsertSample::clear_slots() { slots_.Clear(); }
inline ::google::protobuf::uint32 InsertSample::slots(int index) const {
  // @@protoc_insertion_point(field_get:InsertSample.slots)
  return slots_.Get(index);
}
inline void InsertSample::set_slots(int index,
                                    ::google::protobuf::uint32 value) {
  slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:InsertSample.slots)
}
inline void InsertSample::add_slots(::google::protobuf::uint32 value) {
  slots_.Add(value);
  // @@protoc_insertion_point(field_add:InsertSample.slots)
}
inline const ::google::protobuf::RepeatedField<::google::protobuf::uint32>&
InsertSample::slots() const {
  // @@protoc_insertion_point(field_list:InsertSample.slots)
  return slots_;
}
inline ::google::protobuf::RepeatedField<::google::protobuf::uint32>*
InsertSample::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:InsertSample.slots)
  return &slots_;
}

// .Tags lset = 4;
inline bool InsertSample::has_lset() const {
  return this != internal_default_instance() && lset_ != NULL;
}
inline void InsertSample::clear_lset() {
  if (GetArenaNoVirtual() == NULL && lset_ != NULL) {
    delete lset_;
  }
  lset_ = NULL;
}
inline const ::Tags& InsertSample::_internal_lset() const { return *lset_; }
inline const ::Tags& InsertSample::lset() const {
  const ::Tags* p = lset_;
  // @@protoc_insertion_point(field_get:InsertSample.lset)
  return p != NULL
             ? *p
             : *reinterpret_cast<const ::Tags*>(&::_Tags_default_instance_);
}
inline ::Tags* InsertSample::release_lset() {
  // @@protoc_insertion_point(field_release:InsertSample.lset)

  ::Tags* temp = lset_;
  lset_ = NULL;
  return temp;
}
inline ::Tags* InsertSample::mutable_lset() {
  if (lset_ == NULL) {
    auto* p = CreateMaybeMessage<::Tags>(GetArenaNoVirtual());
    lset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:InsertSample.lset)
  return lset_;
}
inline void InsertSample::set_allocated_lset(::Tags* lset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lset_;
  }
  if (lset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lset = ::google::protobuf::internal::GetOwnedMessage(message_arena, lset,
                                                           submessage_arena);
    }

  } else {
  }
  lset_ = lset;
  // @@protoc_insertion_point(field_set_allocated:InsertSample.lset)
}

// repeated .Tags lsets = 5;
inline int InsertSample::lsets_size() const { return lsets_.size(); }
inline void InsertSample::clear_lsets() { lsets_.Clear(); }
inline ::Tags* InsertSample::mutable_lsets(int index) {
  // @@protoc_insertion_point(field_mutable:InsertSample.lsets)
  return lsets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Tags>*
InsertSample::mutable_lsets() {
  // @@protoc_insertion_point(field_mutable_list:InsertSample.lsets)
  return &lsets_;
}
inline const ::Tags& InsertSample::lsets(int index) const {
  // @@protoc_insertion_point(field_get:InsertSample.lsets)
  return lsets_.Get(index);
}
inline ::Tags* InsertSample::add_lsets() {
  // @@protoc_insertion_point(field_add:InsertSample.lsets)
  return lsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::Tags>& InsertSample::lsets()
    const {
  // @@protoc_insertion_point(field_list:InsertSample.lsets)
  return lsets_;
}

// int64 t = 6;
inline void InsertSample::clear_t() { t_ = GOOGLE_LONGLONG(0); }
inline ::google::protobuf::int64 InsertSample::t() const {
  // @@protoc_insertion_point(field_get:InsertSample.t)
  return t_;
}
inline void InsertSample::set_t(::google::protobuf::int64 value) {
  t_ = value;
  // @@protoc_insertion_point(field_set:InsertSample.t)
}

// repeated double v = 7;
inline int InsertSample::v_size() const { return v_.size(); }
inline void InsertSample::clear_v() { v_.Clear(); }
inline double InsertSample::v(int index) const {
  // @@protoc_insertion_point(field_get:InsertSample.v)
  return v_.Get(index);
}
inline void InsertSample::set_v(int index, double value) {
  v_.Set(index, value);
  // @@protoc_insertion_point(field_set:InsertSample.v)
}
inline void InsertSample::add_v(double value) {
  v_.Add(value);
  // @@protoc_insertion_point(field_add:InsertSample.v)
}
inline const ::google::protobuf::RepeatedField<double>& InsertSample::v()
    const {
  // @@protoc_insertion_point(field_list:InsertSample.v)
  return v_;
}
inline ::google::protobuf::RepeatedField<double>* InsertSample::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:InsertSample.v)
  return &v_;
}

// -------------------------------------------------------------------

// InsertSamples

// repeated .InsertSample samples = 1;
inline int InsertSamples::samples_size() const { return samples_.size(); }
inline void InsertSamples::clear_samples() { samples_.Clear(); }
inline ::InsertSample* InsertSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:InsertSamples.samples)
  return samples_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::InsertSample>*
InsertSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:InsertSamples.samples)
  return &samples_;
}
inline const ::InsertSample& InsertSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:InsertSamples.samples)
  return samples_.Get(index);
}
inline ::InsertSample* InsertSamples::add_samples() {
  // @@protoc_insertion_point(field_add:InsertSamples.samples)
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::InsertSample>&
InsertSamples::samples() const {
  // @@protoc_insertion_point(field_list:InsertSamples.samples)
  return samples_;
}

// -------------------------------------------------------------------

// InsertResult

// uint64 id = 1;
inline void InsertResult::clear_id() { id_ = GOOGLE_ULONGLONG(0); }
inline ::google::protobuf::uint64 InsertResult::id() const {
  // @@protoc_insertion_point(field_get:InsertResult.id)
  return id_;
}
inline void InsertResult::set_id(::google::protobuf::uint64 value) {
  id_ = value;
  // @@protoc_insertion_point(field_set:InsertResult.id)
}

// repeated uint32 slots = 2;
inline int InsertResult::slots_size() const { return slots_.size(); }
inline void InsertResult::clear_slots() { slots_.Clear(); }
inline ::google::protobuf::uint32 InsertResult::slots(int index) const {
  // @@protoc_insertion_point(field_get:InsertResult.slots)
  return slots_.Get(index);
}
inline void InsertResult::set_slots(int index,
                                    ::google::protobuf::uint32 value) {
  slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:InsertResult.slots)
}
inline void InsertResult::add_slots(::google::protobuf::uint32 value) {
  slots_.Add(value);
  // @@protoc_insertion_point(field_add:InsertResult.slots)
}
inline const ::google::protobuf::RepeatedField<::google::protobuf::uint32>&
InsertResult::slots() const {
  // @@protoc_insertion_point(field_list:InsertResult.slots)
  return slots_;
}
inline ::google::protobuf::RepeatedField<::google::protobuf::uint32>*
InsertResult::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:InsertResult.slots)
  return &slots_;
}

// -------------------------------------------------------------------

// InsertResults

// repeated .InsertResult results = 1;
inline int InsertResults::results_size() const { return results_.size(); }
inline void InsertResults::clear_results() { results_.Clear(); }
inline ::InsertResult* InsertResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:InsertResults.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::InsertResult>*
InsertResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:InsertResults.results)
  return &results_;
}
inline const ::InsertResult& InsertResults::results(int index) const {
  // @@protoc_insertion_point(field_get:InsertResults.results)
  return results_.Get(index);
}
inline ::InsertResult* InsertResults::add_results() {
  // @@protoc_insertion_point(field_add:InsertResults.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::InsertResult>&
InsertResults::results() const {
  // @@protoc_insertion_point(field_list:InsertResults.results)
  return results_;
}

// -------------------------------------------------------------------

// QueryRequest

// bool return_metric = 1;
inline void QueryRequest::clear_return_metric() { return_metric_ = false; }
inline bool QueryRequest::return_metric() const {
  // @@protoc_insertion_point(field_get:QueryRequest.return_metric)
  return return_metric_;
}
inline void QueryRequest::set_return_metric(bool value) {
  return_metric_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.return_metric)
}

// .Tags lset = 2;
inline bool QueryRequest::has_lset() const {
  return this != internal_default_instance() && lset_ != NULL;
}
inline void QueryRequest::clear_lset() {
  if (GetArenaNoVirtual() == NULL && lset_ != NULL) {
    delete lset_;
  }
  lset_ = NULL;
}
inline const ::Tags& QueryRequest::_internal_lset() const { return *lset_; }
inline const ::Tags& QueryRequest::lset() const {
  const ::Tags* p = lset_;
  // @@protoc_insertion_point(field_get:QueryRequest.lset)
  return p != NULL
             ? *p
             : *reinterpret_cast<const ::Tags*>(&::_Tags_default_instance_);
}
inline ::Tags* QueryRequest::release_lset() {
  // @@protoc_insertion_point(field_release:QueryRequest.lset)

  ::Tags* temp = lset_;
  lset_ = NULL;
  return temp;
}
inline ::Tags* QueryRequest::mutable_lset() {
  if (lset_ == NULL) {
    auto* p = CreateMaybeMessage<::Tags>(GetArenaNoVirtual());
    lset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:QueryRequest.lset)
  return lset_;
}
inline void QueryRequest::set_allocated_lset(::Tags* lset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lset_;
  }
  if (lset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lset = ::google::protobuf::internal::GetOwnedMessage(message_arena, lset,
                                                           submessage_arena);
    }

  } else {
  }
  lset_ = lset;
  // @@protoc_insertion_point(field_set_allocated:QueryRequest.lset)
}

// int64 mint = 3;
inline void QueryRequest::clear_mint() { mint_ = GOOGLE_LONGLONG(0); }
inline ::google::protobuf::int64 QueryRequest::mint() const {
  // @@protoc_insertion_point(field_get:QueryRequest.mint)
  return mint_;
}
inline void QueryRequest::set_mint(::google::protobuf::int64 value) {
  mint_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.mint)
}

// int64 maxt = 4;
inline void QueryRequest::clear_maxt() { maxt_ = GOOGLE_LONGLONG(0); }
inline ::google::protobuf::int64 QueryRequest::maxt() const {
  // @@protoc_insertion_point(field_get:QueryRequest.maxt)
  return maxt_;
}
inline void QueryRequest::set_maxt(::google::protobuf::int64 value) {
  maxt_ = value;
  // @@protoc_insertion_point(field_set:QueryRequest.maxt)
}

// -------------------------------------------------------------------

// QuerySample

// int64 t = 1;
inline void QuerySample::clear_t() { t_ = GOOGLE_LONGLONG(0); }
inline ::google::protobuf::int64 QuerySample::t() const {
  // @@protoc_insertion_point(field_get:QuerySample.t)
  return t_;
}
inline void QuerySample::set_t(::google::protobuf::int64 value) {
  t_ = value;
  // @@protoc_insertion_point(field_set:QuerySample.t)
}

// double v = 2;
inline void QuerySample::clear_v() { v_ = 0; }
inline double QuerySample::v() const {
  // @@protoc_insertion_point(field_get:QuerySample.v)
  return v_;
}
inline void QuerySample::set_v(double value) {
  v_ = value;
  // @@protoc_insertion_point(field_set:QuerySample.v)
}

// -------------------------------------------------------------------

// QueryGroupSample

// .Tags metric = 1;
inline bool QueryGroupSample::has_metric() const {
  return this != internal_default_instance() && metric_ != NULL;
}
inline void QueryGroupSample::clear_metric() {
  if (GetArenaNoVirtual() == NULL && metric_ != NULL) {
    delete metric_;
  }
  metric_ = NULL;
}
inline const ::Tags& QueryGroupSample::_internal_metric() const {
  return *metric_;
}
inline const ::Tags& QueryGroupSample::metric() const {
  const ::Tags* p = metric_;
  // @@protoc_insertion_point(field_get:QueryGroupSample.metric)
  return p != NULL
             ? *p
             : *reinterpret_cast<const ::Tags*>(&::_Tags_default_instance_);
}
inline ::Tags* QueryGroupSample::release_metric() {
  // @@protoc_insertion_point(field_release:QueryGroupSample.metric)

  ::Tags* temp = metric_;
  metric_ = NULL;
  return temp;
}
inline ::Tags* QueryGroupSample::mutable_metric() {
  if (metric_ == NULL) {
    auto* p = CreateMaybeMessage<::Tags>(GetArenaNoVirtual());
    metric_ = p;
  }
  // @@protoc_insertion_point(field_mutable:QueryGroupSample.metric)
  return metric_;
}
inline void QueryGroupSample::set_allocated_metric(::Tags* metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metric_;
  }
  if (metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }

  } else {
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:QueryGroupSample.metric)
}

// repeated .QuerySample values = 2;
inline int QueryGroupSample::values_size() const { return values_.size(); }
inline void QueryGroupSample::clear_values() { values_.Clear(); }
inline ::QuerySample* QueryGroupSample::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:QueryGroupSample.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::QuerySample>*
QueryGroupSample::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:QueryGroupSample.values)
  return &values_;
}
inline const ::QuerySample& QueryGroupSample::values(int index) const {
  // @@protoc_insertion_point(field_get:QueryGroupSample.values)
  return values_.Get(index);
}
inline ::QuerySample* QueryGroupSample::add_values() {
  // @@protoc_insertion_point(field_add:QueryGroupSample.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::QuerySample>&
QueryGroupSample::values() const {
  // @@protoc_insertion_point(field_list:QueryGroupSample.values)
  return values_;
}

// -------------------------------------------------------------------

// QueryResult

// .Tags metric = 1;
inline bool QueryResult::has_metric() const {
  return this != internal_default_instance() && metric_ != NULL;
}
inline void QueryResult::clear_metric() {
  if (GetArenaNoVirtual() == NULL && metric_ != NULL) {
    delete metric_;
  }
  metric_ = NULL;
}
inline const ::Tags& QueryResult::_internal_metric() const { return *metric_; }
inline const ::Tags& QueryResult::metric() const {
  const ::Tags* p = metric_;
  // @@protoc_insertion_point(field_get:QueryResult.metric)
  return p != NULL
             ? *p
             : *reinterpret_cast<const ::Tags*>(&::_Tags_default_instance_);
}
inline ::Tags* QueryResult::release_metric() {
  // @@protoc_insertion_point(field_release:QueryResult.metric)

  ::Tags* temp = metric_;
  metric_ = NULL;
  return temp;
}
inline ::Tags* QueryResult::mutable_metric() {
  if (metric_ == NULL) {
    auto* p = CreateMaybeMessage<::Tags>(GetArenaNoVirtual());
    metric_ = p;
  }
  // @@protoc_insertion_point(field_mutable:QueryResult.metric)
  return metric_;
}
inline void QueryResult::set_allocated_metric(::Tags* metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metric_;
  }
  if (metric) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }

  } else {
  }
  metric_ = metric;
  // @@protoc_insertion_point(field_set_allocated:QueryResult.metric)
}

// uint64 id = 2;
inline void QueryResult::clear_id() { id_ = GOOGLE_ULONGLONG(0); }
inline ::google::protobuf::uint64 QueryResult::id() const {
  // @@protoc_insertion_point(field_get:QueryResult.id)
  return id_;
}
inline void QueryResult::set_id(::google::protobuf::uint64 value) {
  id_ = value;
  // @@protoc_insertion_point(field_set:QueryResult.id)
}

// repeated .QuerySample values = 3;
inline int QueryResult::values_size() const { return values_.size(); }
inline void QueryResult::clear_values() { values_.Clear(); }
inline ::QuerySample* QueryResult::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResult.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::QuerySample>*
QueryResult::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:QueryResult.values)
  return &values_;
}
inline const ::QuerySample& QueryResult::values(int index) const {
  // @@protoc_insertion_point(field_get:QueryResult.values)
  return values_.Get(index);
}
inline ::QuerySample* QueryResult::add_values() {
  // @@protoc_insertion_point(field_add:QueryResult.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::QuerySample>&
QueryResult::values() const {
  // @@protoc_insertion_point(field_list:QueryResult.values)
  return values_;
}

// repeated .QueryGroupSample series = 4;
inline int QueryResult::series_size() const { return series_.size(); }
inline void QueryResult::clear_series() { series_.Clear(); }
inline ::QueryGroupSample* QueryResult::mutable_series(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResult.series)
  return series_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::QueryGroupSample>*
QueryResult::mutable_series() {
  // @@protoc_insertion_point(field_mutable_list:QueryResult.series)
  return &series_;
}
inline const ::QueryGroupSample& QueryResult::series(int index) const {
  // @@protoc_insertion_point(field_get:QueryResult.series)
  return series_.Get(index);
}
inline ::QueryGroupSample* QueryResult::add_series() {
  // @@protoc_insertion_point(field_add:QueryResult.series)
  return series_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::QueryGroupSample>&
QueryResult::series() const {
  // @@protoc_insertion_point(field_list:QueryResult.series)
  return series_;
}

// -------------------------------------------------------------------

// QueryResults

// repeated .QueryResult results = 1;
inline int QueryResults::results_size() const { return results_.size(); }
inline void QueryResults::clear_results() { results_.Clear(); }
inline ::QueryResult* QueryResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:QueryResults.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::QueryResult>*
QueryResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:QueryResults.results)
  return &results_;
}
inline const ::QueryResult& QueryResults::results(int index) const {
  // @@protoc_insertion_point(field_get:QueryResults.results)
  return results_.Get(index);
}
inline ::QueryResult* QueryResults::add_results() {
  // @@protoc_insertion_point(field_add:QueryResults.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::QueryResult>&
QueryResults::results() const {
  // @@protoc_insertion_point(field_list:QueryResults.results)
  return results_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::InsertSample_InsertType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::InsertSample_InsertType>() {
  return ::InsertSample_InsertType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DB_2eproto
